#include <iostream>
#include <cstdlib>
#include <stdlib.h>
#include <fstream>
using namespace std;

// Define the levels of the graph
const int LEVELS = 27;

// Prototype for our Dijkstra function
void Dijkstra(int *, int *, int[LEVELS][LEVELS]);

int main()
{
    cout << "Problem 5:  Prince of Persia Path Finding" << endl;
    ofstream myfile;
    myfile.open ("Q5_OUTPUT.txt");

    // This problem is solved using a 27 vertice graph
    // L is the Adjancey Matrix for the Graph
    int L[LEVELS][LEVELS] = {
                {-1,  5, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1}, //1
                {5,  -1, 5, -1, -1,-1, -1, -1, -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1}, //2
                {-1,  5, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1}, //3
                {-1,  -1, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1},  //4
                {-1,  -1, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1},  //5
                {-1,  -1, 5, -1, -1,-1, -1, -1, 5, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1}, // 6
                {-1,  -1, -1, -1, -1,-1, -1, 5, -1, -1, -1, -1,  -1, -1, -1,  5, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1},  //7
                {-1,  -1, -1, -1, -1,-1, 5, -1, 5, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1}, // 8
                {-1,  -1, -1, -1, -1,5, -1, 5, -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1}, // 9
                {-1,  -1, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1},  //10
                {-1,  -1, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1},  //11
                {-1,  -1, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1},  //12
                {-1,  -1, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1,  -1, 5, -1,  5, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1},  //13
                {-1,  -1, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1,  5, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  5, -1, -1, -1,-1},  //14
                {-1,  -1, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1},  //15
                {-1,  -1, -1, -1, -1,-1, 5, -1, -1, -1, -1, -1,  5, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1},  //16
                {-1,  -1, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1},  //17
                {-1,  -1, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1},  //18
                {-1,  -1, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1},  //19
                {-1,  -1, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1},  //20
                {-1,  -1, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1},  //21
                {-1,  -1, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1},  //22
                {-1,  -1, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1,  -1, 5, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, 5, -1, 5,-1}, //23
                {-1,  -1, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  5, -1, -1, -1,5},  //24
                {-1,  -1, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,-1},  //25
                {-1,  -1, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  5, -1, -1, -1,5},  //26
                {-1,  -1, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1,  -1, -1, -1,  -1, -1, -1, -1,  -1, -1, -1,  -1, 5, -1, 5,-1}  //27
            };
    int Vertexes[LEVELS];
    int Dist[LEVELS];
    for (int i = 0; i < LEVELS; i++) {
        Vertexes[i] = i;
    }
    Vertexes[0] = -1;
    Dist[0] = 0;

    for (int i = 1; i < LEVELS; i++) {
        Dist[i] = L[0][i];
    }

    int shortestTime = 0;
    for (int curlevel = 1; curlevel < LEVELS; curlevel++) {
        Dijkstra(Vertexes, Dist, L);
        cout << "Level " << curlevel << endl;
        myfile << "Level " << curlevel << endl;
        for (int i = 0; i < LEVELS; i++) {
            cout << Dist[i] << " ";
            myfile << Dist[i] << " ";
            if((i==LEVELS-1)&&(shortestTime<=Dist[i]))
                shortestTime = Dist[i];
        }
    // Evaluate
    // paths available
    // distance
    // shortest path
        cout << endl;
        myfile << endl;
        for (int i = 0; i < LEVELS; i++) {
            cout << Vertexes[i] << " ";
            myfile << Vertexes[i] << " ";
        }
        cout << endl;
        myfile << endl;
    }
    cout << endl;
    cout << "The Shortest Time for the Prince to arive at 2 is: " << shortestTime << endl;
    myfile << endl;
    myfile << "The Shortest Time for the Prince to arive at 2 is: " << shortestTime << endl;
    return 0;
}

// Dijkstra
void Dijkstra(int *Vertexes, int *Dist, int L[LEVELS][LEVELS]) {
    int minValue = 99999;
    int minNode = 0;
    for (int i = 0; i < LEVELS; i++) {
        if (Vertexes[i] == -1) { continue; }
        if (Dist[i] > 0 && Dist[i] < minValue) {
            minValue = Dist[i];
            minNode = i;
        }
    }
    Vertexes[minNode] = -1;
    for (int i = 0; i < LEVELS; i++) {
        if (L[minNode][i] < 0) { continue; }
        if (Dist[i] < 0) {
            Dist[i] = minValue + L[minNode][i];
            continue;
        }
        if ((Dist[minNode] + L[minNode][i]) < Dist[i]) {
            Dist[i] = minValue + L[minNode][i];
        }
    }
}
